<?php
// $Id: openlayers_cck.module,v 1.56 2009/09/24 17:40:47 tmcw Exp $

/**
 * @file
 * This file holds the main Drupal hook functions 
 * and private functions for the openlayers_cck module.
 *
 * @ingroup openlayers
 */

/**
 * Map ID Prefix
 */
define('OPENLAYERS_CCK_MAP_ID_PREFIX', 'openlayers-cck-map-auto-id');

/**
 * Implementation of hook_help
 */
function openlayers_cck_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openlayers_cck':
      $output = '<p>'. t('The openlayers_cck module provides fields and widgets that interface with OpenLayers.') .'</p>';
  }
  
  return $output;
}

/**
 * Implementation of hook_theme().
 */
function openlayers_cck_theme() {
  $themes = array(
    'openlayers_cck_geo_field' => array(
      'arguments' => array(
        'element' => NULL
      ),
    ),
    'openlayers_wkt_widget' => array(
      'arguments' => array(
        'element' => NULL
      ),
    ),
    'openlayers_cck_map' => array(
      'arguments' => array(
        'field' => NULL,
        'map' => NULL,
      ),
    ),
    'openlayers_cck_formatter_wkt_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
    
  // Create formatter theme functions
  /*foreach (openlayers_get_presets() as $name => $title) {
    $themes['openlayers_cck_formatter_' . $name] = array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_openlayers_cck_formatter_map',
    );
  }*/
  
  return $themes;
}

/**
 * Implementation of hook_gis_input_info().
 */
function openlayers_cck_gis_input_info($gis_type = NULL) {
  // Note, we shou use the following so that we can actually control how
  // the widget will work, butdifficult to make unlimited work
  // and Geo does not support it yet
  // 'multiple values' => CONTENT_HANDLE_MODULE,
  $inputs = array(
    'openlayers_cck_geo_field' => array(
      'label' => t('OpenLayers Map (NOT WORKING OR TESETED)'),
      'gis input' => 'wkt',
      'safe reverse' => TRUE,
      'gis types' => array('point', 'linestring', 'polygon'),
      'element' => array(
        '#type' => 'openlayers_cck_geo_field',
      ),
    ),
  );
  return $inputs;
}

/**
 * Implementation of hook_field_info().
 */
function openlayers_cck_field_info() {
  return array(
    'openlayers_wkt' => array(
      'label' => t('OpenLayers WKT'),
      'description' => t('Input WKT data via an OpenLayers map.'),
      'callbacks' => array(
        'tables' => CONTENT_CALLBACK_DEFAULT,
        'arguments' => CONTENT_CALLBACK_DEFAULT,
      ),
      // TODO: ,'content_icon' => '',
    ),
  );
}

/**
 * Implementation of hook_field_settings
 */
function openlayers_cck_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();      
      return $form;

    case 'validate':
      break;

    case 'save':
      return array();

    case 'database columns':
      $columns = array(
        'openlayers_wkt' => array(
          'type' => 'text',
          'not null' => FALSE, 
          'sortable' => TRUE,
          'views' => TRUE,
        ),
      );
      return $columns;
   
   case 'views data':
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);
      return $data;
  }
}

/**
 * Implementation of hook_field
 */
function openlayers_cck_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      // Check if field is valid WKT format
      foreach($items as $delta => $value) {
        // @@TODO: validate WKT
      }
      break;
      
  }
}

/**
 * Implementation of hook_content_is_empty
 */
function openlayers_cck_content_is_empty($item, $field) {
  if (empty($item['openlayers_wkt'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_widget_info
 */
function openlayers_cck_widget_info() {
  return array(
    'openlayers_wkt_widget' => array(
      'label' => t('OpenLayers WKT Map Widget'),
      'field types' => array('openlayers_wkt'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings
 */
function openlayers_cck_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      // Get Presets
      //$presets = openlayers_get_presets();
      $default_preset = variable_get('openlayers_default_preset', 'default');
      $features = array(
        'point' => t('Point'),
        'path' => t('Path'),
        'polygon' => t('Polygon'),
      );
      
      // Define form elements
      $form['openlayers_cck_preset_map'] = array(
        '#type' => 'select',
        '#title' => t('Input Map Preset'),
        '#description' => t('Choose the OpenLayers Preset Map that will be used to input the WKT data.'),
        '#options' => $presets,
        '#default_value' => isset($widget['openlayers_cck_preset_map']) ? $widget['openlayers_cck_preset_map'] : $default_preset,
      );
      // What type of wkt to accept
      $form['openlayers_cck_feature_types'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Feature Types'),
        '#description' => t('Choose the features that are allowed to be inputed on the map.'),
        '#options' => $features,
        '#required' => TRUE,
        '#default_value' => isset($widget['openlayers_cck_feature_types']) ? $widget['openlayers_cck_feature_types'] : array('point', 'path', 'polygon'),
      );
      // Return form
      return $form;

    case 'save':
      return array('openlayers_cck_preset_map', 'openlayers_cck_feature_types');
  }
}

/**
 * Implementation of hook_widget
 */
function openlayers_cck_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  switch ($field['widget']['type']) {
    case 'openlayers_wkt_widget':
      $element = array(
        '#type' => 'openlayers_wkt_widget',
        '#default_value' => $items,
      );
      break;
  }
  return $element;
}

/**
 * Implementation of FAPI hook_elements().
 */
function openlayers_cck_elements() {
  return array(
    'openlayers_cck_geo_field' => array(
      '#input' => TRUE,
      '#columns' => array('openlayers_wkt'),
      '#delta' => 0,
      '#process' => array('openlayers_cck_wkt_element_process'),
    ),
    'openlayers_wkt_widget' => array(
      '#input' => TRUE,
      '#columns' => array('openlayers_wkt'),
      '#delta' => 0,
      '#process' => array('openlayers_cck_wkt_element_process'),
    ),
  );
}

/**
 * Process an individual element.
 */
function openlayers_cck_wkt_element_process($element, $edit, &$form_state, &$form) {
  $field = $form['#field_info'][$element['#parents'][0]];
  $delta = $element['#delta'];
  $field_name = $field['field_name'];
  $widget = $field['widget'];
  $field_label = $widget['label'];
  $field_key = $element['#columns'][0];
  
  // Make map for input
  $rendered_map = _openlayers_cck_render_element_map($field_name, $field_label, $element['#value'], $field);
  // Create map element
  $element['map'] = array(
    '#value' => theme('openlayers_cck_map', $field, $rendered_map),
  );
  
  // Create storage element
  $element['openlayers_wkt'] = array(
    '#type' => 'textarea',
    '#rows' => 2,
    '#attributes' => array('rel' => $rendered_map['id']),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  
  // Make default value.  It will be stored in hidden field
  $default_value = '';
  if (is_array($element['#value'])  && count($element['#value']) > 0) {
    // Look for actual values
    $values = array();
    foreach ($element['#value'] as $id => $data_array) {
      $values[$id] = $data_array['openlayers_wkt'];
    }
    // Create string
    if (is_array($values)  && count($values) > 0) {
      $default_value = implode('||', $values);
    }
  }
  
  // Hidden element.  This is used to store a more distinctly
  // delimited dataset
  $element['openlayers_wkt_hidden'] = array(
    '#type' => 'hidden',
    '#default_value' => $default_value,
  );
  
  // Set #element_validate in a way that it will not wipe out other
  // validation functions already set by other modules.
  if (empty($element['#element_validate'])) {
    $element['#element_validate'] = array();
  }
  array_unshift($element['#element_validate'], 'openlayers_cck_validate');

  // Make sure field info will be available to the validator which
  // does not get the values in $form.
  $form_state['#field_info'][$field['field_name']] = $field;
  return $element;
}

/**
 * FAPI validate function for custom element
 */
function openlayers_cck_validate($element, &$form_state) {
  // Transpose selections from field => delta to delta => field,
  // turning multiple selected options into multiple parent elements.
  // Immediate parent is the delta, need to get back to parent's parent
  // to create multiple elements.
  
  // Get field array
  $field = $form_state['#field_info'][$element['#field_name']];
  // Convert data to array of values
  $items = _openlayers_cck_convert_form_data($element, $field);
  // Set value in form
  form_set_value($element, $items, $form_state);

  // Check we don't exceed the allowed number of values.
  if ($field['multiple'] >= 2) {
    if (count($items) > $field['multiple']) {
      $field_key  = $element['#columns'][0];
      form_error($element[$field_key], t('%name: this field cannot hold more that @count values.', array('%name' => t($field['widget']['label']), '@count' => $field['multiple'])));
    }
  }
}

/**
 *
 */
function _openlayers_cck_convert_form_data($element, $field) {
  $field_key = $element['#columns'][0];
  $items = explode('||', $element['#value'][$field_key . '_hidden']);
  $result = array();

  if (empty($items)) {
    $items[] = NULL;
  }
  $result = content_transpose_array_rows_cols(array($field_key => $items));
  return $result;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function openlayers_cck_field_formatter_info() {
  $formatters = array();
  
  // Default formatter  
  $formatters['wkt_default'] = array(
    'label' => t('Default WKT Value'),
    'field types' => array('geo', 'openlayers_wkt'),
    'multiple values' => CONTENT_HANDLE_MODULE,
  );
    
  // Map preset formatter
  /*foreach (openlayers_get_presets() as $name => $title) {
    $formatters[$name] = array(
      'label' => t('OpenLayers Map: @preset', array('@preset' => check_plain($title))),
      'field types' => array('geo', 'openlayers_wkt'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    );
  }
   */
  return $formatters;
}

/**
 * Theme function for openlayers_cck_geo_field element
 */
function theme_openlayers_cck_geo_field($element) {
  return $element['#children'];
}

/**
 * Theme function for openlayers_wkt_widget element
 */
function theme_openlayers_wkt_widget($element) {
  return $element['#children'];
}

/**
 * Theme function for openlayers cck default formatters
 */
function theme_openlayers_cck_formatter_wkt_default($element) {  $features = array();
  $features = array();
  $output = '';

  // Create array of $features
  foreach (element_children($element) as $delta) {
    $features[$delta] = $element[$delta]['#item']['openlayers_wkt'];
  }
  
  // Check count and build geomtry collection
  if (count($features) > 0) {
    if (count($features) > 1){
      $output = 'GEOMETRYCOLLECTION(' . implode(',', $features) . ')';
    }
    else {
      $output = $features[0];
    }
  }

  return $output;
}

/**
 * Theme function for openlayers cck formatters
 */
function theme_openlayers_cck_formatter_map($element) {
  $features = array();
  $field = content_fields($element['#field_name'], $element['#type_name']);

  // Create array of $features
  foreach (element_children($element) as $delta) {
    $features['openlayers_cck_vector_feature_' . $delta] = array(
      'wkt' => $element[$delta]['#item']['openlayers_wkt'],
      'projection' => '4326',
    );
  }

  // Get preset name from formatter
  $preset_name = str_replace('openlayers_cck_formatter_', '', $element['#formatter']);
  
  // Get map preset
  $map = openlayers_get_map($preset_name);
  
  // Add features and vector layer
  if (count($features) > 0) {
    $map['layers']['openlayers_cck_vector'] = array(
      'id' => 'openlayers_cck_vector',
      'name' => $field['widget']['label'],
      'type' => 'Vector',
      'options' => array(),
      'features' => $features,  
    );
    $map['options']['displayProjection'] = ($field['srid'] != 0) ? $field['srid'] : '4326';
  }
  
  // Render map
  $rendered = openlayers_render_map($map);

  // Check for output
  if (!$map['errors'] && !empty($map['width'])) {
    return $rendered['themed'];
  }
  else {
    return '';
  }
}

/**
 * Theme function for openlayers_cck_map
 */
function theme_openlayers_cck_map($field = array(), $map = array()) {
  $title = check_plain(t($field['widget']['label']));
  $description = content_filter_xss(t($field['widget']['description']));
  $output = '';
  
  // Check for errors
  if (!empty($map['errors'])) {
    return $output;
  }
  
  $output = '
    <div id="openlayers-cck-map-container-' . $map['id'] . '" class="form-item openlayers-cck-map-container">
      <label for="openlayers-cck-map-' . $map['id'] . '">' . $title . ':</label>
      ' . $map['themed'] . '
      <div class="description openlayers-cck-map-instructions">'.t('Click the tools in the upper right-hand corner of the map to switch between draw mode and zoom/pan mode. Draw your shape, double-clicking to finish. You may edit your shape using the control points. To delete a shape, select it and press the delete key. To delete a vertex hover over it and press the d key.').'</div>
      <div class="description openlayers-cck-map-description">
        ' . $description . '
      </div>
      <div class="openlayers-cck-actions">
        <a href="#" id="' . $map['id'] . '-wkt-switcher" rel="' . $map['id'] . '">'. t('Show/Hide WKT Fields') .'</a>
      </div>
    </div>
  ';
  return $output;
}

/**
 * Render Map for Geo Widget
 *
 * @param $field_name
 *   CCK name of field
 * @param $values
 *   Current default values
 * @param $field
 *   Array of field data
 * @return
 *   Rendered map array
 */
function _openlayers_cck_render_element_map($field_name = '', $field_label = '', $values = array(), $field = array()) {
  $field_name_html = str_replace('_', '-', $field_name);
  $map_id = OPENLAYERS_CCK_MAP_ID_PREFIX . '-' . $field_name;
  $field_type = $field['type'];
  $field_type_html = str_replace('_', '-', $field_type);
  $widget = $field['widget'];
  $field_container = 'edit-' . $field_name_html . '-' . $field_type_html . '-wrapper';
  $field_id = 'edit-' . $field_name_html . '-' . $field_type_html;
  $hidden_field_id = 'edit-' . $field_name_html . '-openlayers-wkt-hidden';

  // Get map to use for field
  if (isset($widget['openlayers_cck_preset_map'])) {
    $map = openlayers_get_map($widget['openlayers_cck_preset_map']);
  }
  else {
    $map = openlayers_get_default_map();
  }
  
  // Put together map
  $map['id'] = $map_id;

  // Add main event for CCK processing
  $map['events']['beforeBehaviors'] = array('CCKProcess');
  
  // Make sure that our display projection matches the database projection
  $map['options']['displayProjection'] = ($field['srid'] != 0) ? $field['srid'] : '4326';
  
  // Define a vector layer for our features
  $map['layers']['openlayers_cck_vector'] = array(
    'id' => 'openlayers_cck_vector',
    'type' => 'Vector',
    'name' => $field_label,
    'options' => array(),
    'events' => array(
      'featureselected' => array('CCKFeaturesSelected'),
      'featureunselected' => array('CCKFeaturesUnselected'),
    ),
  );
  
  // Create base behavior array
  $behavior_base = array(
    'type' => 'openlayers_behaviors_draw_features',
    'layer' => 'openlayers_cck_vector',
    'featureadded_handler' => array('OL.CCK.featureAdded'),
    'featuremodified_handler' => array('OL.CCK.featureModified'),
    'featureremoved_handler' => array('OL.CCK.featureRemoved'),
  );
  
  // Look for geo type
  if ($type == 'geo' && isset($field['geo_type'])) {
    // Add id to geo type and add base behavoir to map
    $behavior_base['id'] = 'openlayers_cck_edit_' . $field['geo_type'];
    $map['behaviors']['openlayers_cck_edit_' . $field['geo_type']] = $behavior_base;
    
    // Determine type from geo type
    switch ($field['geo_type']) {
      case 'point':
        $map['behaviors']['openlayers_cck_edit_' . $field['geo_type']]['feature_type'] = 'point';
        break;
      
      case 'linestring':
        $map['behaviors']['openlayers_cck_edit_' . $field['geo_type']]['feature_type'] = 'path';
        break;
        
      case 'polygon':
        $map['behaviors']['openlayers_cck_edit_' . $field['geo_type']]['feature_type'] = 'polygon';
        break;
    }
  }
  else {
    // Check which feature types are available
    if ($widget['openlayers_cck_feature_types']){
      foreach ($widget['openlayers_cck_feature_types'] as $type) {
        if (!empty($type)) {
          $map['behaviors']['openlayers_cck_edit_' . $type] = $behavior_base + 
            array(
              'id' => 'openlayers_cck_edit_' . $type,
              'feature_type' => $type,
            );
        }
      }
    }
    // @@TODO: Allow default values using a map
    // We are in the widget settings screen and it wants default values
    else return false;
  }
  
  // Render Map
  $rendered_map = openlayers_render_map($map);
  
  // Check errors
  if (!$rendered_map['errors']) {
    // Add JS
    drupal_add_js(drupal_get_path('module', 'openlayers_cck') .'/js/openlayers_cck.js');
    //Add CSS
    drupal_add_css(drupal_get_path('module', 'openlayers_cck') .'/openlayers_cck.css', 'module');
    
    // Put together array for JS
    $openlayers_cck = array(
      'openlayers_cck' => array(
        'maps' => array(
          $map_id => array(
            'field_name' => $field_name,
            'field_data' => $field,
            'field_name_js' => $field_name_html,
            'field_container' => $field_container,
            'field_items' => $items,
            'field_id' => $field_id,
            'hidden_field_id' => $hidden_field_id,
            'map_container' => 'openlayers-cck-map-container-' . $map_id,
          ),
        ),
      ),
    );

    // Add JS settings
    drupal_add_js($openlayers_cck, 'setting');
  }

  return $rendered_map;
}
